Computer Communication Workshop: DNY - Dynamic Domain Name for You:

Abstract Idea Description

1.	Team members: Dana Haham, Noa Pinsler, Yarin Baslo. 
2.	The Problem: In many regions, access to specific websites and online services is restricted due to governmental censorship, ISP-level blocking, or geographical content restrictions. These limitations can hinder user productivity, access to knowledge, and internet freedom. Additionally, DNS servers can sometimes experience downtime or overload, resulting in widespread connectivity issues and leaving many systems unable to resolve domain names properly. Most users are unaware of DNS or how changing it can help bypass these restrictions. Even if they are, manually configuring DNS is time-consuming and technical, creating a barrier to usability.
3.	Idea: A tool that dynamically changes the DNS for a specific request or session to provide seamless access to websites blocked or restricted by their current DNS.
4.	Added Value: 
a.	Precision and Non-Intrusiveness: Dynamically switches DNS only for the specific blocked request or session, ensuring the user's global DNS settings remain untouched, preserving their preferred speed, security, and reliability for all other activities.
b.	Fully Automated Detection: Automatically detects when a website or service is inaccessible due to DNS-related issues and initiates the DNS switch without any manual input from the user.
c.	Zero Technical Knowledge Required: Requires no expertise in networking or DNS management, providing an easy and seamless experience for everyone.
d.	Cross-Platform Compatibility: The tool is compatible across various platforms and devices, making it a versatile solution for users on different operating systems and environments
5.	Target Market: 
a.	General Internet Users: Non-technical individuals who need seamless access to websites blocked by DNS issues.
b.	People in Authoritarian Regimes: Individuals living under restrictive governments who face censorship and need tools to bypass blocked websites and access unrestricted information.
c.	IT Professionals and System Administrators: Experienced individuals who manage and configure DNS settings across networks and devices, seeking an automated solution to streamline DNS management and ensure uninterrupted access for users.
6.	Strengths:
a.	Automation: Eliminates the need for manual DNS configuration, making it highly user-friendly.
b.	Accessibility: Simplifies access to restricted websites without requiring technical expertise.
c.	Convenience: Operates seamlessly in the background, providing a hassle-free experience.
d.	Cross-Platform Potential: Can be developed to support various operating systems like Windows, macOS, and Linux.
e.	Broad Appeal: Useful for a wide range of users, including casual internet users, remote workers, and travelers.
7.	Weaknesses:
a.	Limited Scope: Focuses only on DNS-related blocks and won't work for more advanced restrictions like IP-based or deep packet inspection.
b.	Technical Challenges: interacting with the network layer of the operating system, which requires precise handling of system-level APIs, permissions, and network configurations.
c.	Dependency on DNS Servers: Effectiveness relies on the availability and performance of external DNS servers like Google DNS or Cloudflare.
d.	Potential User Confusion: Users may not understand the tool's function or why their DNS settings are being changed.
8.	Competition:
a.	Manual DNS Switching: Users can manually change DNS settings on their devices, but this is time-consuming and requires technical knowledge.
b.	Browser Extensions: Extensions like those supporting DNS-over-HTTPS (DoH) can resolve DNS issues for web browsers but lack system-wide coverage.
c.	VPN Services: VPNs can bypass geo-restrictions by rerouting traffic, but they are more complex, expensive, and may slow down the connection.
d.	Third-Party DNS Changers: Existing tools may offer DNS switching but lack automation triggered by website accessibility issues.
e.	Our tool differentiates itself by automating the process based on user activity and requiring no manual intervention.
9.	Main Features:
a.	Automatic Detection: Recognizes when a website is inaccessible due to DNS issues.
b.	Dynamic Switching: Automatically changes the DNS to an alternative, more accessible server.
c.	User Feedback: Notifies users about the DNS change and its success.
d.	Ethical Content Check: Utilizes AI to analyze the website the user is trying to access and provides a warning if the site is identified as unethical, harmful, or potentially unsafe.
10.	User Flow:
a.	The user tries to access a blocked website.
b.	The tool detects the DNS resolution failure and switches to a preconfigured or tested DNS server.
c.	The user gains access to the website without needing to take additional steps.
d.	The tool logs the activity and reverts to the original DNS attest.
11.	Dependencies:
a.	Public DNS Servers: Requires access to alternative DNS providers like Google DNS, Cloudflare DNS, or OpenDNS.
b.	System-Level APIs: Uses operating system APIs to change DNS settings dynamically.
c.	Internet Connectivity: Relies on an active internet connection to test and switch DNS servers.

High Level Architecture

1.	System Main Components: The DNS Interception Tool consists of several key components working together to enable seamless, dynamic DNS resolution that circumvents blocked websites. The main components of the system are as follows:
a.	Local DNS Server: Acts as the central component that intercepts all outgoing DNS requests, determines whether the domain is accessible, and dynamically reroutes blocked requests to an external DNS provider when necessary.
Responsibility: 
1)	Intercept all outgoing HTTP/HTTPS requests and route them through the tool.
2)	Identify whether a domain is blocked by analyzing DNS responses or patterns.
3)	Redirect blocked domains to an alternative DNS provider for blocked or failed requests.
4)	Respond to the user's system with appropriate results.
5)	Revert to the user's default DNS settings for subsequent requests.
b.	DNS Blocking Detection Mechanism: Identifies whether the requested domain is blocked based on DNS response codes or by matching the resolved IP address against known censorship patterns. It integrates directly with the Local Proxy Server.
Responsibility: 
1)	Monitor DNS response data for indications of blocks or failures.
2)	Analyze patterns or IP addresses returned for blocked domains.
3)	Automatically trigger the DNS switching mechanism when a block is detected.
c.	External DNS Provider: Acts as a fallback for blocked DNS requests. It uses third-party DNS servers to resolve requests that the local DNS provider fails to handle.
Responsibility:
1)	Provide DNS resolution for domains that are blocked or inaccessible via the user's default DNS provider.
d.	Ethical Content Check: Analyzes the content of the requested domain to ensure it adheres to ethical standards and is not harmful, malicious, or otherwise unsafe.
Responsibility: 
1)	Use AI-based or external APIs to classify the website as safe, harmful, or unethical.
2)	Warn the user if the domain falls into a high-risk or unethical category, providing options to proceed or block
e.	Notification: Notifies users of DNS resolution activity, including when a domain is blocked, resolved using an external DNS provider, or flagged for ethical concerns. 
Responsibility:
1)	Display pop-up or tray notifications for the following events:
a)	A domain is detected as blocked.
b)	DNS resolution is successfully bypassed using an external DNS.
c)	A site is flagged as unsafe or unethical after ethical content analysis.
2)	Offer clear actions to the user, such as "Proceed Anyway" or "Block Site."
2.	 Main User's Use Cases:
a.	Use Case 1 - Normal Domain Access (No Block):
 
b.	Use Case 2 - Blocked Domain Detection and DNS Switch:
 
c.	Use Case 3 - Unsafe or Unethical Website Detection:
 
3.	Back-End Technology: The local DNS server is implemented using Python with the following key components and libraries:
a.	Core Technologies:
1)	Python 3.x: The primary programming language used for the implementation
2)	Standard Library Components:
   - socket: For UDP socket communication and DNS request handling
   - threading: For concurrent request processing
   - logging: For comprehensive system logging
   - platform: For cross-platform compatibility detection
   - subprocess: For system-level DNS configuration detection
3)	External Libraries:
   - dnslib (v0.9.23): For DNS packet parsing and manipulation
   - psutil (v5.9.5): For system resource monitoring and management
   - win10toast (v0.9): For Windows-specific notifications (optional)
   - requests: For website content fetching and analysis
   - openai: For AI-based domain content analysis
   - beautifulsoup4: For HTML parsing and content extraction
   - urllib3: For robust HTTP request handling

b.	Implementation Details:
1)	Custom DNS Forwarder:
   - Native socket implementation for DNS request handling
   - Direct UDP communication on port 53
   - Automatic local DNS detection across platforms
   - Fallback mechanism to Google DNS (8.8.8.8)
2)	Cross-Platform Support:
   - Windows: Uses ipconfig for DNS detection
   - macOS: Uses scutil and /etc/resolv.conf
   - Linux: Uses /etc/resolv.conf
3)	Performance Features:
   - Multi-threaded request handling
   - Configurable timeouts (2s local, 5s fallback)
   - Efficient resource management
4)	Content Checker:
   - AI-powered domain analysis using GPT-3.5
   - Website content extraction and parsing
   - Risk level classification (low/medium/high)
   - Ethical content validation
   - Robots.txt compliance checking
   - SSL verification
   - Automatic retry mechanism for failed requests

4.	Communication Protocols: 
a.	Primary Protocol:
   - UDP on port 53 for DNS communication
   - Standard DNS packet format
   - Support for both IPv4 and IPv6
b.	Error Handling:
   - Timeout management for failed requests
   - Automatic fallback to alternative DNS servers
   - Comprehensive logging of all operations

5.	Front-End Technologies:
a.	Current Implementation:
   - Command-line interface with logging output
   - System tray notifications (Windows)
   - Cross-platform compatibility
b.	Future Enhancements:
   - Planned GUI implementation using Electron.js
   - Web-based configuration interface
   - Real-time status monitoring

Technical Implementation Details

1. Core Components:
a. DNSForwarder Class:
   - Handles DNS request interception and forwarding
   - Implements automatic local DNS detection
   - Manages fallback to Google DNS (8.8.8.8)
   - Uses UDP sockets for DNS communication
   - Implements timeout handling for both local and fallback DNS

b. Platform-Specific Features:
   - Windows: Uses ipconfig for DNS detection
   - macOS: Uses scutil and /etc/resolv.conf
   - Linux: Uses /etc/resolv.conf
   - Cross-platform compatibility through platform detection

2. DNS Resolution Process:
a. Request Handling:
   - Intercepts DNS queries on port 53
   - Extracts query ID for tracking
   - Attempts resolution through local DNS first
   - Falls back to Google DNS if local resolution fails

b. Response Processing:
   - Validates DNS responses
   - Checks for answer count in response
   - Implements timeout handling (2s for local, 5s for Google DNS)
   - Returns successful responses to client

3. Error Handling:
a. Comprehensive logging system:
   - Logs DNS detection
   - Logs query processing
   - Logs resolution attempts
   - Logs errors and timeouts

b. Fallback Mechanisms:
   - Automatic local DNS detection
   - Google DNS as default fallback
   - Graceful error handling for all operations

4. Security Considerations:
a. Socket Security:
   - Uses SO_REUSEADDR for proper socket handling
   - Implements proper socket cleanup
   - Handles connection timeouts

b. Error Prevention:
   - Validates DNS responses
   - Implements proper exception handling
   - Ensures resource cleanup

5. Performance Optimizations:
a. Threading:
   - Uses threading for concurrent request handling
   - Implements proper thread management
   - Optimizes resource usage

b. Timeout Management:
   - Short timeouts for local DNS (2s)
   - Longer timeouts for fallback DNS (5s)
   - Efficient resource cleanup

6. Content Checker Implementation:
a. Core Features:
   - OpenAI GPT-3.5 integration for domain analysis
   - BeautifulSoup4 for HTML parsing and content extraction
   - Robots.txt compliance checking
   - SSL certificate verification
   - Automatic retry mechanism with exponential backoff

b. Risk Assessment:
   - Three-tier risk classification (low/medium/high)
   - Pattern-based risk detection
   - Content analysis for harmful material
   - Domain reputation checking
   - SSL security validation

c. Content Analysis Process:
   1. Domain Validation:
      - Format verification
      - Length checking
      - Basic syntax validation
   
   2. Website Access:
      - Robots.txt compliance check
      - SSL certificate verification
      - User-agent spoofing
      - Automatic retry on failure
   
   3. Content Extraction:
      - Title and meta description parsing
      - Main content area identification
      - Text content extraction
      - Image and media analysis
   
   4. AI Analysis:
      - GPT-3.5 powered content evaluation
      - Risk level determination
      - Harmful content detection
      - Ethical standards compliance

d. Security Features:
   - API key validation and management
   - Rate limiting protection
   - Timeout handling
   - Error logging and monitoring
   - Secure content fetching

e. Performance Optimizations:
   - Caching of analysis results
   - Parallel content processing
   - Efficient HTML parsing
   - Resource cleanup
   - Memory management

